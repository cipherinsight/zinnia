//! An end-to-end example of using the SP1 SDK to generate a proof of a program that can be executed
//! or have a core proof generated.
//!
//! You can run this script using the following command:
//! ```shell
//! RUST_LOG=info cargo run --release -- --execute
//! ```
//! or
//! ```shell
//! RUST_LOG=info cargo run --release -- --prove
//! ```// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use alloy_sol_types::SolType;
use clap::Parser;
use fibonacci_lib::PublicValuesStruct;
use rand::{Rng, SeedableRng};
use sp1_sdk::{include_elf, ProverClient, SP1Stdin};
use std::time::Instant;
use ethereum_types::U512;

/// The ELF (executable and linkable format) file for the Succinct RISC-V zkVM.
pub const FIBONACCI_ELF: &[u8] = include_elf!("fibonacci-program");

/// The arguments for the command.
#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
struct Args {
    #[clap(long)]
    execute: bool,

    #[clap(long)]
    prove: bool,
}

fn main() {
    // Setup the logger.
    sp1_sdk::utils::setup_logger();
    dotenv::dotenv().ok();

    // Parse the command line arguments.
    let args = Args::parse();

    if args.execute == args.prove {
        eprintln!("Error: You must specify either --execute or --prove");
        std::process::exit(1);
    }

    // Setup the prover client.
    let client = ProverClient::from_env();

    // Setup the inputs.
    let mut stdin = SP1Stdin::new();

    let x1 = U512::from_str_radix("995203441582195749578291179787384436505546430278305826713579947235728471134", 10).unwrap();
    for i in 0..8 {
        stdin.write(&x1.0[i]);
    }
    let y1 = U512::from_str_radix("5472060717959818805561601436314318772137091100104008585924551046643952123905", 10).unwrap();
    for i in 0..8 {
        stdin.write(&y1.0[i]);
    }
    let x2 = U512::from_str_radix("5299619240641551281634865583518297030282874472190772894086521144482721001553", 10).unwrap();
    for i in 0..8 {
        stdin.write(&x2.0[i]);
    }
    let y2 = U512::from_str_radix("16950150798460657717958625567821834550301663161624707787222815936182638968203", 10).unwrap();
    for i in 0..8 {
        stdin.write(&y2.0[i]);
    }
    let x3 = U512::from_str_radix("14805543388578810117460687107379140748822348273316260688573060998934016770136", 10).unwrap();
    for i in 0..8 {
        stdin.write(&x3.0[i]);
    }
    let y3 = U512::from_str_radix("13589798946988221969763682225123791336245855044059976312385135587934609470572", 10).unwrap();
    for i in 0..8 {
        stdin.write(&y3.0[i]);
    }


    if args.execute {
        panic!("Execution not supported in this environment.");
    } else {
                // Setup the program for proving.
        let (pk, vk) = client.setup(FIBONACCI_ELF);

        let start = Instant::now();
        // Generate the proof
        let proof = client
            .prove(&pk, &stdin)
            .run()
            .expect("failed to generate proof");
        let duration = start.elapsed();
        println!("Prove time (zk-STARK) (ms): {:?}", duration.as_millis());

        proof
        .save("proof-with-pis-stark.bin")
        .expect("saving proof failed");

        let start = Instant::now();
        // Verify the proof.
        client.verify(&proof, &vk).expect("failed to verify proof");
        let duration = start.elapsed();
        println!("Verify time (zk-STARK) (ms): {:?}", duration.as_millis());
        println!("Successfully verified proof!");

        let start = Instant::now();
        // Generate the proof
        let proof = client
            .prove(&pk, &stdin)
            .plonk()
            .run()
            .expect("failed to generate proof");
        let duration = start.elapsed();
        println!("Prove time (zk-SNARK) (ms): {:?}", duration.as_millis());

        println!("Successfully generated proof!");

        proof
            .save("proof-with-pis.bin")
            .expect("saving proof failed");

        let start = Instant::now();
        // Verify the proof.
        client.verify(&proof, &vk).expect("failed to verify proof");
        let duration = start.elapsed();
        println!("Verify time (zk-SNARK) (ms): {:?}", duration.as_millis());
        println!("Successfully verified proof!");
    }
}
